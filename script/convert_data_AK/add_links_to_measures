#!/usr/bin/env python3
import os
import yaml


# Custom loader to preserve order
def ordered_load(stream, Loader=yaml.Loader) -> dict:
    return yaml.load(stream, Loader=Loader)


# Custom dumper to preserve order
def ordered_dump(data, stream=None, Dumper=yaml.Dumper, **kwargs):
    return yaml.dump(data, stream, Dumper=Dumper, default_flow_style=False, sort_keys=False, **kwargs)


def link_measures_to_requirements(measure_folder):
    urns_to_original = {}

    for filename in os.listdir(measure_folder):
        if filename.endswith(".yaml"):
            with open(os.path.join(measure_folder, filename)) as file:
                data = ordered_load(file, Loader=yaml.FullLoader)  # Load with order preserved
                urns_requirements = data.get("links", [])
                urn_measure = data.get("urn", [])
                for urn_req in urns_requirements:
                    if urn_req not in urns_to_original:
                        urns_to_original[urn_req] = [urn_measure]
                    else:
                        if urn_measure not in urns_to_original[urn_req]:
                            urns_to_original[urn_req].append(urn_measure)
    return urns_to_original


def insert_into_requirements(requirement_folder, measure_folder, rename_ai_act_labels_dict):
    urns_to_original = link_measures_to_requirements(measure_folder)

    for filename in os.listdir(requirement_folder):
        if filename.endswith(".yaml"):
            with open(os.path.join(requirement_folder, filename)) as file:
                data = ordered_load(file, Loader=yaml.FullLoader)  # Load while preserving order

                if "links" in data:
                    if isinstance(data["links"], list):
                        # Create reverse links based on the URN
                        data["links"] = urns_to_original.get(data.get("urn"), [])

                if "ai_act_profile" in data:
                    for profile in data["ai_act_profile"]:
                        for key in profile:
                            if isinstance(profile[key], list):
                                profile[key] = [rename_ai_act_labels_dict.get(item, item) for item in profile[key]]

                # Write out the modified data to the secondary folder
                with open(os.path.join(requirement_folder, filename), "w") as new_file:
                    ordered_dump(data, new_file)  # Dump with order preserved


rename_ai_act_labels_dict = {
    "ai-systeem": "AI-systeem",
    "ai-systeem-voor-algemene-doeleinden": "AI-systeem voor algemene doeleinden",
    "ai-model-voor-algemene-doeleinden": "AI-model voor algemene doeleinden",
    "verboden-ai": "verboden AI",
    "hoog-risico-ai-systeem": "hoog-risico AI",
    "geen-hoog-risico-ai-systeem": "geen hoog-risico AI",
}

# Define directories
measure_folder = "measures"
requirement_folder = "requirements"

insert_into_requirements(requirement_folder, measure_folder, rename_ai_act_labels_dict)
