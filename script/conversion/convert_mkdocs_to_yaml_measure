#!/usr/bin/env python3
import os
import re
from pathlib import Path

import click
import yaml


def parse_markdown_to_yaml(input_file: str, destination: Path) -> None:
    with open(input_file, encoding="utf-8") as file:
        content = file.read()

    # Extract front-matter (YAML-like header)
    front_matter = re.search(r"---\n(.*?)\n---", content, re.DOTALL)

    front_matter_data = yaml.safe_load(front_matter.group(1)) if front_matter else {}

    # Extract sections from Markdown content
    sections = {
        "Maatregel": re.search(r"## Maatregel\n\n(.*?)\n\n##", content, re.DOTALL),
        "Toelichting": re.search(r"## Toelichting\n\n(.*?)\n\n##", content, re.DOTALL),
        "Bronnen": re.search(r"## Bronnen\n\n(.*?)\n\n##", content, re.DOTALL),
        "Risico": re.search(r"## Risico\n\n(.*?)\n\n##", content, re.DOTALL),
        "Maatregelen": re.search(r"## Maatregelen\n\n(.*?)\n\n", content, re.DOTALL),
    }

    # Use found sections or defaults
    explanation_text = (
        sections["Toelichting"].group(1)
        if sections["Toelichting"]
        else "" + " " + sections["Risico"].group(1)
        if sections["Risico"]
        else ""
    )
    description_text = sections["Maatregel"].group(1) if sections["Maatregel"] else ""
    urn = front_matter_data.get("id", "")
    title = front_matter_data.get("title", "")
    url_title = input_file.split("/")[-1].replace(".md", "")
    vereiste = front_matter_data.get("vereiste", "")
    output_file = destination / Path(url_title + ".yaml")

    # Prepare data for YAML output
    yaml_data = {
        "systemcard_path": ".systemcard.requirements[]",
        "schema_version": "1.1.0",
        "name": title,
        "description": description_text,
        "explanation": explanation_text,
        "urn": urn
        if urn
        else f"urn:nl:ak:mtr:{url_title}",  # temporary solution until AK has implemented the URN themselves
        "language": "nl",
        "owners": [{"organization": "Algoritmekader", "name": "", "email": "", "role": ""}],
        "date": "",
        "url": f"https://minbzk.github.io/Algoritmekader/maatregelen/{url_title}/index.html",
        "subject": front_matter_data.get("onderwerp", []),
        "suggested_roles": front_matter_data.get("rollen", []),
        "lifecycle": front_matter_data.get("levenscyclus", []),
        "links": [
            f"urn:nl:ak:ver:{item if "-" not in item else item.split('-')[0] + "-" + item.split('-')[1]}"
            for item in vereiste
        ]
        if vereiste
        else [],
        "template": {
            "requirement": "$REQUIREMENT",
            "remarks": "$REMARKS",
            "status": "$STATUS",
            "timestamp": "$TIMESTAMP",
            "authors": [{"name": "$AUTHOR.NAME", "email": "$AUTHOR.EMAIL", "role": "$AUTHOR.ROLE"}],
        },
    }

    # Write to output YAML file
    with open(output_file, "w", encoding="utf-8") as file:
        yaml.dump(yaml_data, file, allow_unicode=True, sort_keys=False)


@click.command()
@click.argument("source", type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path))
@click.argument("destination", type=click.Path(exists=False, file_okay=False, dir_okay=True, path_type=Path))
def read_folder(source: Path, destination: Path) -> None:
    destination.mkdir(parents=True, exist_ok=True)
    for filename in sorted(os.listdir(source)):
        file_path: str = os.path.join(source, filename)
        if os.path.isfile(file_path) and "index" not in file_path:
            parse_markdown_to_yaml(file_path, destination)


read_folder()
